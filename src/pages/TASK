// Мы будем писать блог  

// Ровно такой же как и на уроке.

// Суть его в чём


// Рект + Роутер


// Создаём два Layout’а.
// Первый для Логина и Пароля.
// В нём реализуем нашу форму и проверку на заполненность и соответствия паролей. У него будет изначальный адрес /login

// ***
// Второй Layout это главная  у которого шапка с ссылками.
// Посередине Outlet для отображения наших страниц.
// Внизу футер

// Какие будут ссылки:
// Главная ( / )
// Посты ( /posts )
// Создать пост ( /new )
// Контакты ( /contacts )

// Какие будут страницы: 
// Главная
// Посты
// Создать пост
// Редактировать пост
// Контакты


// Страница ПОСТЫ
// Тут реализуем такую же логику как и на уроке. Получаем массив с постами и делаем из них список ссылок на отдельные посты.
// Но в данном случае у нас ещё перед каждой ссылкой будет кнопки УДАЛИТЬ и РЕДАКТИРОВАТЬ.

// Кнопке DELETE мы на этапе разметки дадим порядковый idx каждой статьи, и по нему будем из STATE’а статей удалять нужную нам статью.

// Кнопка EDIT будет ссылкой на страницу EDIT. 
// Вариант 1. 
// Мы научились при переходе с помощью useNavigate и state передавать инфу на ту страницу куда идём, и при помощи location получать эту инфу на той странице куда пришли.
// Так мы получим именно тот обьект поста который нам нужен.

// Вариант 2. Мы делаем для EDIT страницы динамически путь /edit/:id, и ссылка EDIT просто будет отправлять нас с нужным id в адресной строке. Это тоже мы умеем получать через useParams и можно сделать fetch запрос к нашим статьям и получить одну нужную. Её засунуть в state, а STATE привязан к форме редактирования. Получится что при загрузке сразу подтянется статья )

// Вариант 1 быстрее по заргрузке, не надо ждать ответа от сервера. Но решать Вам )


// Страница Редактирования
// Помимо описанной функциональности Выше, страница Edit будет иметь поля ввода и кнопку внизу СОХРАНИТЬ. Эта кнопка будет ссылкой ( LINK ), которая возмёт объект с отредактированной статьёй и запихнёт его в STATE ссылки.
// Ссылка будет вести на страницу /posts.

// Дальше на странице POSTS в самом начале компонента будет проверка:
// Если в location() в state что-то есть, то возьми этот объект и присвойте той статье которую редактировали. У вас будет ID, а значит можно будет от него отнять 1 и получить порядковый номер редактируемой статьи в массиве. Например 

// let arr = [1,2,3,4,5]
// arr[2] = 9
// console.log(arr); // [1, 2, 9, 4, 5 ]

// Страница Создать пост
// ТОже самое что и EDIT, собираем форму - передаём через state раутера, но тут просто добавляем новую статью в НАЧАЛО массива статей. Не PUSH().
